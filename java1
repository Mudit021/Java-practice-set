For reference use: https://onecompiler.com/cheatsheets/java
# To display print
import java.util.Scanner; // how to take input from the user.
public class Main{
    public static void main(String[] args){
        double Print =5.5 ;
        float num = 4.4f;
        System.out.println(Print+" "+num); // print more than 1 keyword
    }
}
------------------------------------------------------------------
# to take input and use if,else if, else
import java.util.Scanner;
public class Main{
    public static void main(String[] args){
        System.out.println("Enter your name:");
        Scanner in = new Scanner(System.in);
        String s = in.nextLine();
        if (s.equals("Mudit")){
            System.out.println("Hey Mudit");
        }
        else if (s.equals("Gupta")){
            System.out.println("Hey Guptaji");
        }
        else {
            System.out.println("Not welcome here");
        }
        in.close();
    }
}
------------------------------------------------------------------------
# use of while loop ( this uses format of ICU i.e. Initialization, Condition, Update)
import java.util.Scanner;
public class Main{
    public static void main(String[] args){
        System.out.println("Here we ggoooooo");
        int i=0; // initialilzation
        while(i<10){ // condition
            System.out.println("i is:"+i);
            i++; // update
        }
    }
}
-----------------------------------------------------------------------
# use of for loop( in this ICU is in one parameter)
import java.util.Scanner;
public class Main{
    public static void main(String[] args){
        System.out.println("Hello lets do it4");
        for(int i = 0 ; i<10 ; i++){
            System.out.println("i is :"+i);
        }
    }
}
----------------------------------------------------------------------
# use of do while note: if using false with while the loop will run atleast once
import java.util.Scanner;
public class Main{
    public static void main(String[] args){
        System.out.println("Let's go");
        Scanner in = new Scanner(System.in);
        int a = in.nextInt();// note for input as string use nextLine() for interger use nextInt() i.e. jis datatype ko initialize kr rahe h usko next ke saath lihkna h
        int i = 0; // initialization    
        do{
            System.out.println("i is:"+i);
            i++;// update    
        }
        while(i<a);// condition
    }
}
------------------------------------------------------------------------------
# voting age 
import java.util.Scanner;
public class Main{
    public static void main(String[] args){
        System.out.println("Enter your age:");
        Scanner in = new Scanner (System.in);
        Integer i = in.nextInt();
        if (i<18){
            System.out.println("You can not vote.");
        }
        else {
            System.out.println("You are eligible.");
        }
         in.close();
    }
}
----------------------------------------------------------------------------------
# simple calculator
import java.util.Scanner;
public class Main{
	public static void main(String[] agrs){
		System.out.println("Enter a symbl from +,-,/,*");
		Scanner in = new Scanner(System.in);
		String symbol = in.nextLine();
		System.out.println("Enter first number:");
		int num1 = in.nextInt();
		System.out.println("Enter second number:");
		int num2  =in.nextInt();
		if(symbol.equals("+")){
			int c=num1+num2;
			System.out.println("The sum between "+num1+" and "+num2+" is :"+c);
			}
		else if(symbol.equals("-")){
			int c=num1-num2;
			System.out.println("The difference between "+num1+" and "+num2+" is :"+c);
			}
		else if(symbol.equals("/")){
			int c=num1/num2;
			System.out.println("The divion between "+num1+" and "+num2+" is :"+c);
			}
		else if(symbol.equals("*")){
			int c=num1*num2;
			System.out.println("The product between "+num1+" and "+num2+" is :"+c);
			}
		}	
	}
-----------------------------------------------------------------------------
# use of linked list (as this prints the first one in the queue)
import java.util.LinkedList;
import java.util.Scanner;
public class Main{
    public static void main(String[] args){
        System.out.println("Enter your word:");
        Scanner in = new Scanner(System.in);
        //System.out.println("This is your syntax: "+ a+'.');
        LinkedList<String> names= new LinkedList<String>();
        for (int i =0; i<5;i++){
            String a = in.nextLine();
            names.add(a);
        }
        System.out.println(names.remove());// this will print thwe first one in the queue of the linked list.
    }
}
----------------------------------------------------------------------------------------------------
# the use of ArrayList as in this we have to also use the position of the index to be printed and removed
import java.util.ArrayList;
import java.util.Scanner;
public class Main{
    public static void main(String[] args){
        System.out.println("Enter your word:");
        Scanner in = new Scanner(System.in);
        //System.out.println("This is your syntax: "+ a+'.');
        ArrayList<String> names= new ArrayList<String>();
        for (int i =0; i<5;i++){
            String a = in.nextLine();
            names.add(a);
        }
        System.out.println( names.remove(2));
    }
}
-----------------------------------------------------------------------------------------------------------
#  STACKS in JAVA
import java.util.*;
public class Main{
	public static void main(String[] args) {
		LinkedList<String> names = new LinkedList<String>();
		names.push("Mudit");// 0 index
		names.push("Mdit");//1 index
		names.push("Muit");//2 index
		names.push("Mudt");//3 index
		// three ways to show the last entered element in the stack
		System.out.println(names.remove()); // it can also take index
		System.out.println(names.pop());
		System.out.println(names.removeFirst());
		}
	}
--------------------------------------------------------------------------------------------------
//#  STACKS ka Iterator in JAVA
import java.util.*;
public class Main{
	public static void main(String[] args) {
		LinkedList<String> names = new LinkedList<String>();
		names.push("Mudit");
		names.push("Mdit");
		names.push("Muit");
		names.push("Mudt");
		Iterator<String> it = names.iterator(); // iterator
		//iteration using while
		while(it.hasNext()){ // this is the repetition of the iterator as this function allows to repeate itself again and again.
			System.out.println(it.next()); // this will print the last entered element in the stack. and moves the head node to the next element.
		}
		System.out.println("This prints like a stack of plates.");
		//iteration using for
		for (String s: names){
			System.out.println(s);
			}
		// to add element in a positon in stack use function of add(<position>,<data>)
		names.add(3, "Qwerty");
		System.out.println("Now we will add Qwerty to the 3rd index.");
		for (String s: names){
			System.out.println(s);
			}
		}
		}
-------------------------------------------------------------------------------------
// refactoring = taking a project that is good and changing the source , fewer bug and cleaner code
---------------------------------------------------------------------------------------
// ready from file
import java.util.*;
import java.io.*;
public class newfile
{
	public static void main(String[] args){
		try{Scanner in = new Scanner(new File("text.txt"));
		String read = in.nextLine();
		System.out.println(read);
		} catch (FileNotFoundException e){
			System.out.println("File not found: "+e.getMessage());;
			}
		}
	}
========================================================================================
// ready from file with while loop
import java.util.*;
import java.io.*;
public class newfile
{
	public static void main(String[] args){
		try{Scanner in = new Scanner(new File("text.txt"));
	//if there is more than one line to read then use while loop
		while(in.hasNext()){
		String read = in.nextLine();
		System.out.println(read);}
		} catch (FileNotFoundException e){
			System.out.println("File not found: "+e.getMessage());;
			}
		}
	}
===============================================================================================
// collection in java - ordered list, dictionaries/maps, sets


// polimosphism  = Polymorphism is one of the core concepts of Object-Oriented Programming (OOP), and it means "many forms". 
// inheritance =  inheritance allows a class (subclass) to inherit fields and methods from another class (superclass), enabling code reuse and the creation of hierarchical relationships between classes.
// encapsulation =  encapsulation means hiding the internal details (like data or variables) of a class and only allowing access to them through special methods (getter and setter). This helps protect the data from being changed directly and ensures itâ€™s always used in a controlled way.
// abstraction = hide the complex implementation details and show only the essential features to the user. In simpler terms, abstraction allows you to focus on what an object does, not on how it does it.
import java.util.*;
public class Collection{
  public static void main(String[] args){
    int[] ages = new int[5][3];//this is making of array note: always give value in braces
    // two types of arrays in java 2d and jagged
    // this is the example of jagged array
    ages[0] = new int[10];
    ages[1] = new int[3];
    ArrayList<Integer> ages = new ArrayList<Interger>();
    ages.add(5); // how to add in ArrayList   
  }
}
===========================================================================================================
// hash
import java.util.*;
public class Main{
    public static void main(String[] args){
    String s = "Hello World";
    
        System.out.println(s.hashCode());    
    }
}
======================================================================================================
// add and get/getOrDefault from HashMap
import java.util.*;
public class Main{
    public static void main(String[] args){
    
    HashMap<String,Integer> ids = new HashMap<String, Integer>();
    // add in HashMap     ids.put(key,value);
    ids.put("Mudit",3);
    ids.put("Gupta",4);
    // getOrDefault : in this the initial value is given that if the key doesn't exsist then it will be created
    ids.put("Gupta", ids.getOrDefault("Gupta",0)+1);
    // to get a value from HashMap	ids.get(key);
    System.out.println(ids.get("Mudit"));
    System.out.println(ids.get("Gupta"));
    // to print the values from the keys
    Set<String> keys = ids.keySet();
    for(String key : keys){
    System.out.println(key);
    	}
    }
}
=============================================================================================================



